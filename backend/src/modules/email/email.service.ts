import { Injectable, Logger } from '@nestjs/common';
import * as nodemailer from 'nodemailer';
import { Transporter } from 'nodemailer';

export interface EmailOptions {
  to: string | string[];
  subject: string;
  html?: string;
  text?: string;
  attachments?: any[];
}

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);
  private transporter: Transporter;

  constructor() {
    this.initializeTransporter();
  }

  private initializeTransporter() {
    // Em produ√ß√£o, use SMTP real (Gmail, SendGrid, etc)
    // Para desenvolvimento, use Ethereal Email (testing)
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.ethereal.email',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER || 'ethereal.user@ethereal.email',
        pass: process.env.SMTP_PASS || 'ethereal-password',
      },
    });

    this.logger.log('üìß Email service initialized');
  }

  /**
   * Envia um email
   */
  async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      const mailOptions = {
        from: process.env.SMTP_FROM || '"Clinic Companion" <noreply@clinic.com>',
        to: Array.isArray(options.to) ? options.to.join(', ') : options.to,
        subject: options.subject,
        text: options.text,
        html: options.html,
        attachments: options.attachments,
      };

      const info = await this.transporter.sendMail(mailOptions);
      this.logger.log(`‚úÖ Email sent: ${info.messageId}`);

      // Para Ethereal, log preview URL
      if (process.env.NODE_ENV === 'development') {
        this.logger.log(`üìß Preview URL: ${nodemailer.getTestMessageUrl(info)}`);
      }

      return true;
    } catch (error) {
      this.logger.error(`‚ùå Email send failed: ${error.message}`);
      return false;
    }
  }

  /**
   * Email de boas-vindas para novo paciente
   */
  async sendWelcomeEmail(patientName: string, email: string): Promise<boolean> {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin-top: 20px; }
          .footer { text-align: center; margin-top: 20px; color: #777; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üè• Bem-vindo ao Clinic Companion!</h1>
          </div>
          <div class="content">
            <h2>Ol√°, ${patientName}!</h2>
            <p>√â um prazer t√™-lo(a) conosco. Estamos aqui para acompanhar sua jornada de recupera√ß√£o com o melhor cuidado poss√≠vel.</p>

            <h3>O que voc√™ pode fazer:</h3>
            <ul>
              <li>üì∏ Enviar fotos do seu p√≥s-operat√≥rio</li>
              <li>ü§ñ Receber an√°lises de IA em tempo real</li>
              <li>üìÖ Agendar consultas</li>
              <li>üí¨ Suporte emocional personalizado</li>
              <li>üìä Acompanhar seu progresso</li>
            </ul>

            <p>Nossa equipe est√° dispon√≠vel 24/7 para ajud√°-lo(a).</p>

            <a href="http://localhost:3000" class="button">Acessar Plataforma</a>
          </div>
          <div class="footer">
            <p>¬© ${new Date().getFullYear()} Clinic Companion. Todos os direitos reservados.</p>
            <p>Se voc√™ n√£o criou esta conta, por favor ignore este email.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return this.sendEmail({
      to: email,
      subject: 'üè• Bem-vindo ao Clinic Companion!',
      html,
    });
  }

  /**
   * Lembrete de consulta
   */
  async sendAppointmentReminder(
    patientEmail: string,
    patientName: string,
    appointmentDate: Date,
    doctorName: string,
  ): Promise<boolean> {
    const formattedDate = appointmentDate.toLocaleDateString('pt-BR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #4CAF50; color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .appointment-box { background: white; border-left: 4px solid #4CAF50; padding: 20px; margin: 20px 0; }
          .important { color: #d32f2f; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üìÖ Lembrete de Consulta</h1>
          </div>
          <div class="content">
            <h2>Ol√°, ${patientName}!</h2>
            <p>Este √© um lembrete da sua consulta agendada:</p>

            <div class="appointment-box">
              <p><strong>üìÖ Data e Hora:</strong> ${formattedDate}</p>
              <p><strong>üë®‚Äç‚öïÔ∏è M√©dico:</strong> Dr(a). ${doctorName}</p>
            </div>

            <p class="important">‚ö†Ô∏è Por favor, chegue com 15 minutos de anteced√™ncia.</p>

            <h3>Recomenda√ß√µes:</h3>
            <ul>
              <li>Traga seus documentos pessoais</li>
              <li>Liste suas d√∫vidas e preocupa√ß√µes</li>
              <li>Traga exames anteriores (se houver)</li>
            </ul>

            <p>Se precisar reagendar, entre em contato conosco o quanto antes.</p>
          </div>
          <div style="text-align: center; margin-top: 20px; color: #777; font-size: 12px;">
            <p>¬© ${new Date().getFullYear()} Clinic Companion</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return this.sendEmail({
      to: patientEmail,
      subject: `üìÖ Lembrete: Consulta em ${appointmentDate.toLocaleDateString('pt-BR')}`,
      html,
    });
  }

  /**
   * Alerta de an√°lise de IA detectou complica√ß√£o
   */
  async sendAnalysisAlert(
    patientEmail: string,
    patientName: string,
    analysisId: string,
    severity: string,
    findings: string[],
  ): Promise<boolean> {
    const severityColors = {
      low: '#FFA726',
      medium: '#FF7043',
      high: '#E53935',
      critical: '#B71C1C',
    };

    const color = severityColors[severity.toLowerCase()] || '#FF7043';

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: ${color}; color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .alert-box { background: white; border-left: 4px solid ${color}; padding: 20px; margin: 20px 0; }
          .findings { background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>‚ö†Ô∏è Alerta de An√°lise de IA</h1>
          </div>
          <div class="content">
            <h2>Ol√°, ${patientName}!</h2>
            <p>Nossa an√°lise de IA detectou alguns pontos que requerem aten√ß√£o:</p>

            <div class="alert-box">
              <p><strong>üîç ID da An√°lise:</strong> ${analysisId}</p>
              <p><strong>‚ö†Ô∏è Severidade:</strong> ${severity.toUpperCase()}</p>
            </div>

            <div class="findings">
              <h3>Achados:</h3>
              <ul>
                ${findings.map((finding) => `<li>${finding}</li>`).join('')}
              </ul>
            </div>

            <p><strong>‚öïÔ∏è Pr√≥ximos Passos:</strong></p>
            <ul>
              <li>Nossa equipe m√©dica foi notificada</li>
              <li>Voc√™ receber√° contato em breve</li>
              <li>Mantenha os cuidados recomendados</li>
              <li>Em caso de urg√™ncia, procure atendimento imediato</li>
            </ul>

            <p>N√£o se preocupe - estamos monitorando sua recupera√ß√£o de perto.</p>
          </div>
          <div style="text-align: center; margin-top: 20px; color: #777; font-size: 12px;">
            <p>¬© ${new Date().getFullYear()} Clinic Companion</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return this.sendEmail({
      to: patientEmail,
      subject: `‚ö†Ô∏è Alerta: An√°lise de IA - Severidade ${severity.toUpperCase()}`,
      html,
    });
  }

  /**
   * Confirmar agendamento de consulta
   */
  async sendAppointmentConfirmation(
    patientEmail: string,
    patientName: string,
    appointmentDate: Date,
    doctorName: string,
    appointmentType: string,
  ): Promise<boolean> {
    const formattedDate = appointmentDate.toLocaleDateString('pt-BR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #2196F3; color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .confirmation-box { background: white; border: 2px solid #4CAF50; padding: 20px; margin: 20px 0; border-radius: 5px; }
          .checkmark { color: #4CAF50; font-size: 48px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="checkmark">‚úì</div>
            <h1>Consulta Confirmada!</h1>
          </div>
          <div class="content">
            <h2>Ol√°, ${patientName}!</h2>
            <p>Sua consulta foi confirmada com sucesso:</p>

            <div class="confirmation-box">
              <p><strong>üìÖ Data e Hora:</strong> ${formattedDate}</p>
              <p><strong>üë®‚Äç‚öïÔ∏è M√©dico:</strong> Dr(a). ${doctorName}</p>
              <p><strong>üè• Tipo:</strong> ${appointmentType}</p>
            </div>

            <p>Voc√™ receber√° um lembrete antes da consulta.</p>
            <p>Aguardamos voc√™!</p>
          </div>
          <div style="text-align: center; margin-top: 20px; color: #777; font-size: 12px;">
            <p>¬© ${new Date().getFullYear()} Clinic Companion</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return this.sendEmail({
      to: patientEmail,
      subject: '‚úì Consulta Confirmada - Clinic Companion',
      html,
    });
  }
}
